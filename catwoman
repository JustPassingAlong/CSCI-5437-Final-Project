package project;

import java.applet.Applet;
import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.GraphicsConfiguration;
import java.awt.event.MouseAdapter;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.net.URL;

import javax.imageio.ImageIO;
import javax.media.j3d.Appearance;
import javax.media.j3d.Background;
import javax.media.j3d.BoundingSphere;
import javax.media.j3d.BranchGroup;
import javax.media.j3d.Canvas3D;
import javax.media.j3d.ImageComponent2D;
import javax.media.j3d.Material;
import javax.media.j3d.PointLight;
import javax.media.j3d.Transform3D;
import javax.media.j3d.TransformGroup;
import javax.vecmath.Color3f;
import javax.vecmath.Point3d;
import javax.vecmath.Point3f;
import javax.vecmath.Vector3d;

import com.jogamp.newt.event.MouseEvent;
import com.sun.j3d.utils.applet.MainFrame;
import com.sun.j3d.utils.universe.SimpleUniverse;

public class Paint extends Applet {
	
	public static void main(String[] args) {
		new MainFrame(new Paint(), 640, 480);
}
	private int imageHeight = 256;
	private int imageWidth = 256; 
	private int lastX=-1;
	private int lastY=-1;
	private int mouseButton = 0;
	private Canvas3D cv;
	
	private ImageComponent2D coloringPage() {
		URL url = getClass().getClassLoader().getResource
    			("res/Monsters.png");
    			BufferedImage bi = new BufferedImage(600,700,
    			 BufferedImage.TYPE_INT_ARGB);
    			try {
    			bi = ImageIO.read(url);
    			} 
    			catch (IOException ex) {
    			ex.printStackTrace();
    			}
    			ImageComponent2D image =
    			new ImageComponent2D(ImageComponent2D.FORMAT_RGB, bi);
		return image;
		}
	
	public Point3d getPosition(MouseEvent event) {
		Point3d eyePos = new Point3d();
		Point3d mousePos = new Point3d();
		cv.getCenterEyeInImagePlate(eyePos);
		cv.getPixelLocationInImagePlate(event.getX(),
                       event.getY(), mousePos);
		Transform3D transform = new Transform3D();
		cv.getImagePlateToVworld(transform);
		transform.transform(eyePos);
		transform.transform(mousePos);
		Vector3d direction = new Vector3d(eyePos);
		direction.sub(mousePos);
		// three points on the plane
		Point3d p1 = new Point3d(.5, -.5, .5);
		Point3d p2 = new Point3d(.5, .5, .5);
		Point3d p3 = new Point3d(-.5, .5, .5);
		Transform3D currentTransform = new Transform3D();
		coloringPage().getRenderedImage();
		currentTransform.transform(p1);
		currentTransform.transform(p2);
		currentTransform.transform(p3);		
		Point3d intersection = getIntersection(eyePos, mousePos,
                        p1, p2, p3);
		currentTransform.invert();
		currentTransform.transform(intersection);
		return intersection;		
	}
		Point3d getIntersection(Point3d line1, Point3d line2, 
			Point3d plane1, Point3d plane2, Point3d plane3) {
		Vector3d p1 = new Vector3d(plane1);
		Vector3d p2 = new Vector3d(plane2);
		Vector3d p3 = new Vector3d(plane3);
		Vector3d p2minusp1 = new Vector3d(p2);
		p2minusp1.sub(p1);
		Vector3d p3minusp1 = new Vector3d(p3);
		p3minusp1.sub(p1);
		Vector3d normal = new Vector3d();
		normal.cross(p2minusp1, p3minusp1);
		// The plane can be defined by p1, n + d = 0
		double d = -p1.dot(normal);
		Vector3d i1 = new Vector3d(line1);
		Vector3d direction = new Vector3d(line1);
		direction.sub(line2);
		double dot = direction.dot(normal);
		if (dot == 0) return null;
		double t = (-d - i1.dot(normal)) / (dot);
		Vector3d intersection = new Vector3d(line1);
		Vector3d scaledDirection = new Vector3d(direction);
		scaledDirection.scale(t);
		intersection.add(scaledDirection);
		Point3d intersectionPoint = new Point3d(intersection);
		return intersectionPoint;
	}
	
	public void init() {
		setLayout(new BorderLayout());

		GraphicsConfiguration config = SimpleUniverse
				.getPreferredConfiguration();
		cv = new Canvas3D(config);
		BranchGroup bg = createSceneGraph();
		bg.compile();
		SimpleUniverse su = new SimpleUniverse(cv);
		su.getViewingPlatform().setNominalViewingTransform();
		su.addBranchGraph(bg);        
		cv.addMouseListener(new MouseAdapter() {
			public void mouseDragged(MouseEvent event) {
				if (mouseButton==MouseEvent.BUTTON1) return;
				 Point3d  intersectionPoint = getPosition(event);
				 if (Math.abs(intersectionPoint.x) < 0.5 && Math.abs(intersectionPoint.y) < 0.5)  {
					 double x = (0.5 + intersectionPoint.x) * imageWidth;
					 double y = (0.5 - intersectionPoint.y) * imageHeight;
					 //BufferedImage coloringPage = new BufferedImage(512,128, BufferedImage.TYPE_INT_ARGB);
					 Graphics2D g = (Graphics2D) coloringPage().getImage().getGraphics();
					 g.setColor( Color.BLACK);
					 g.setStroke(new BasicStroke(3));
					 int iX = (int)(x + .5);
					 int iY = (int)(y + .5);
					 if (lastX < 0) {
						 lastX = iX;
						 lastY = iY;
					 }
					 g.drawLine(lastX, lastY, iX, iY);
					 lastX = iX;
					 lastY = iY;
					  }
			}
			
			});		
		
	}


	private BranchGroup createSceneGraph() {
		BranchGroup root = new BranchGroup();
		// Appearance
		Appearance ap = new Appearance();
		ap.setMaterial(new Material());
		// Transform group
		TransformGroup move = new TransformGroup();
		coloringPage().setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);
		coloringPage().setCapability(TransformGroup.ALLOW_TRANSFORM_READ);
		root.addChild(move);
		// Lights
		PointLight light = new PointLight(new Color3f(Color.red),
										  new Point3f(1f,1f,1f),
										  new Point3f(1f,0.1f,0f));
		BoundingSphere bounds = new BoundingSphere();
		light.setInfluencingBounds(bounds);
		Background background = new Background(coloringPage());
		background.setApplicationBounds(bounds);
		root.addChild(background);
		return root;
	}
	}
